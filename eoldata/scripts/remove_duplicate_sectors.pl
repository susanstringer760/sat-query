#!/usr/bin/perl
#
use DBI;

# script to pull the schedule information
# from the database

use FindBin;
use Sys::Hostname;
use Cwd;
use File::Basename;
use lib "FindBin::Bin";
require "common.sub.pl";
require "config.pl";

my $current_dir = cwd();
my $current_date_time = `date '+%Y%m%d_%H%M%S'`;
chop($current_date_time);

my $db_name = dbName();
my $user = dbUser();
my $password = dbPassword();
my $host = hostname;
my $host_name = (split(/\./, $host))[0];
my $log_dir = logDir();
my $script_name = $0;
my $current_date_time = `date '+%Y%m%d_%H%M%S'`;
$script_name =~ s/^(\.\/)//g;
$script_name =~ s/.pl$//g;
$script_name = basename($script_name);
chop($current_date_time);
my $log_dir = logDir();
system("mkdir -p $log_dir") if (!-e $log_dir);
my $output_fname = "$log_dir/$script_name.$host.$db_name.$current_date_time.log";

open(OUTPUT, ">$output_fname") || die "cannot open $output_fname";


print OUTPUT "File generated by: $script_fname\n";

my $dbh = connectToDB($db_name, $user, $password, $host);

my $sql = "select name from Sector group by name having count(*) > 1 order by count(*)";
print "asdfasdf: $sql\n";exit();

my $dup_ref = $dbh->selectall_hashref($sql, 'name');

my @arr;
my @duplicates;
foreach $name (sort(keys %$dup_ref)) {
  print "processing $name\n";
  my $dup_sql = "select * from Sector where name = '$name'";
  #print "duplicate sql: $dup_sql\n";
  my $query_ref = $dbh->selectall_hashref($dup_sql, 'id');
  foreach $i (sort(keys %$query_ref)) {
    my $hash_ref = {};
    $hash_ref->{'id'} = $query_ref->{$i}->{id};
    $hash_ref->{'name'} = $query_ref->{$i}->{name};
    $hash_ref->{'abrv'} = $query_ref->{$i}->{abrv};
    $hash_ref->{'duration'} = $query_ref->{$i}->{duration};
    $hash_ref->{'satellite'} = $query_ref->{$i}->{satellite};
    #print "testing: ".$hash_ref->{'name'}." and ".$hash_ref->{'satellite' }."\n";
    push(@arr, $hash_ref);
  }
  my $ref1 = $arr[0];
  my $ref2 = $arr[1];
  my %sector_hash;
  my %delete_id;
  my $match = true;
  foreach $key (keys(%$ref1)) {
    my @delete_ids;
    $match = true;
    $sector_hash{$key} = [$ref1->{$key},$ref2->{$key}];
    my $val1 = $sector_hash{$key}->[0];
    my $val2 = $sector_hash{$key}->[1];
    next if ( $key eq 'name');
    print "\t$key: comparing $val1 to $val2\n";
    if ( $val1 ne $val2) {
      $match = false;
      #my $xx = $sector_hash{'id'}->[0];
      #print "$key match = $match and $xx\n";
      last;
    }
    #print "$key match = $match\n";
  }
  print "match: $match\n";
  #exit();

}  
